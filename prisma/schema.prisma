// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  TEACHER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  Room          Room[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Room {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  title       String
  imageUrl    String?
  description String?
  difficulty  Difficulty
  published   Boolean          @default(false)
  author      User?            @relation(fields: [authorId], references: [id])
  authorId    String?
  content     String?
  containers  DockerTemplate[]
}

enum Difficulty {
  Easy
  Medium
  Hard
}

model DockerTemplate {
  id           String  @id @default(cuid())
  name         String
  image        String
  internalPort Int
  externalPort Int
  roomId       String?
  room         Room?   @relation(fields: [roomId], references: [id])
}

model DockerContainer {
  id           String   @id @default(cuid())
  userId       String
  templateId   String
  name         String
  image        String
  internalPort Int
  externalPort Int
  createdAt    DateTime @default(now())
  isActive     Boolean  @default(true)
  roomId       String?

  @@unique([userId, templateId])
}
